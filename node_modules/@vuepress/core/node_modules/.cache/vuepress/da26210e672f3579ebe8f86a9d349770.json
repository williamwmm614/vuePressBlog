{"remainingRequest":"C:\\Users\\admin\\Desktop\\vuePressBlog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\admin\\Desktop\\vuePressBlog\\node_modules\\@vuepress\\core\\lib\\client\\root-mixins\\updateMeta.js","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\vuePressBlog\\node_modules\\@vuepress\\core\\lib\\client\\root-mixins\\updateMeta.js","mtime":1592282150533},{"path":"C:\\Users\\admin\\Desktop\\vuePressBlog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1592282153324},{"path":"C:\\Users\\admin\\Desktop\\vuePressBlog\\node_modules\\babel-loader\\lib\\index.js","mtime":1592282152833}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJDOi9Vc2Vycy9hZG1pbi9EZXNrdG9wL3Z1ZVByZXNzQmxvZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiQzovVXNlcnMvYWRtaW4vRGVza3RvcC92dWVQcmVzc0Jsb2cvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwppbXBvcnQgdW5pb25CeSBmcm9tICdsb2Rhc2gvdW5pb25CeSc7CmV4cG9ydCBkZWZhdWx0IHsKICAvLyBjcmVhdGVkIHdpbGwgYmUgY2FsbGVkIG9uIGJvdGggY2xpZW50IGFuZCBzc3IKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5zaXRlTWV0YSA9IHRoaXMuJHNpdGUuaGVhZFRhZ3MuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDEpLAogICAgICAgICAgaGVhZGVyVHlwZSA9IF9yZWYyWzBdOwoKICAgICAgcmV0dXJuIGhlYWRlclR5cGUgPT09ICdtZXRhJzsKICAgIH0pLm1hcChmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLAogICAgICAgICAgXyA9IF9yZWY0WzBdLAogICAgICAgICAgaGVhZGVyVmFsdWUgPSBfcmVmNFsxXTsKCiAgICAgIHJldHVybiBoZWFkZXJWYWx1ZTsKICAgIH0pOwoKICAgIGlmICh0aGlzLiRzc3JDb250ZXh0KSB7CiAgICAgIHZhciBtZXJnZWRNZXRhSXRlbXMgPSB0aGlzLmdldE1lcmdlZE1ldGFUYWdzKCk7CiAgICAgIHRoaXMuJHNzckNvbnRleHQudGl0bGUgPSB0aGlzLiR0aXRsZTsKICAgICAgdGhpcy4kc3NyQ29udGV4dC5sYW5nID0gdGhpcy4kbGFuZzsKICAgICAgdGhpcy4kc3NyQ29udGV4dC5wYWdlTWV0YSA9IHJlbmRlclBhZ2VNZXRhKG1lcmdlZE1ldGFJdGVtcyk7CiAgICB9CiAgfSwKICAvLyBPdGhlciBsaWZlIGN5Y2xlcyB3aWxsIG9ubHkgYmUgY2FsbGVkIGF0IGNsaWVudAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAvLyBpbml0IGN1cnJlbnRNZXRhVGFncyBmcm9tIERPTQogICAgdGhpcy5jdXJyZW50TWV0YVRhZ3MgPSBfdG9Db25zdW1hYmxlQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbWV0YScpKTsgLy8gdXBkYXRlIHRpdGxlIC8gbWV0YSB0YWdzCgogICAgdGhpcy51cGRhdGVNZXRhKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGRhdGVNZXRhOiBmdW5jdGlvbiB1cGRhdGVNZXRhKCkgewogICAgICBkb2N1bWVudC50aXRsZSA9IHRoaXMuJHRpdGxlOwogICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IHRoaXMuJGxhbmc7CiAgICAgIHZhciBuZXdNZXRhVGFncyA9IHRoaXMuZ2V0TWVyZ2VkTWV0YVRhZ3MoKTsKICAgICAgdGhpcy5jdXJyZW50TWV0YVRhZ3MgPSB1cGRhdGVNZXRhVGFncyhuZXdNZXRhVGFncywgdGhpcy5jdXJyZW50TWV0YVRhZ3MpOwogICAgfSwKICAgIGdldE1lcmdlZE1ldGFUYWdzOiBmdW5jdGlvbiBnZXRNZXJnZWRNZXRhVGFncygpIHsKICAgICAgdmFyIHBhZ2VNZXRhID0gdGhpcy4kcGFnZS5mcm9udG1hdHRlci5tZXRhIHx8IFtdOyAvLyBwYWdlTWV0YVRhZ3MgaGF2ZSBoaWdoZXIgcHJpb3JpdHkgdGhhbiBzaXRlTWV0YVRhZ3MKICAgICAgLy8gZGVzY3JpcHRpb24gbmVlZHMgc3BlY2lhbCBhdHRlbnRpb24gYXMgaXQgaGFzIHRvbyBtYW55IGVudHJpZXMKCiAgICAgIHJldHVybiB1bmlvbkJ5KFt7CiAgICAgICAgbmFtZTogJ2Rlc2NyaXB0aW9uJywKICAgICAgICBjb250ZW50OiB0aGlzLiRkZXNjcmlwdGlvbgogICAgICB9XSwgcGFnZU1ldGEsIHRoaXMuc2l0ZU1ldGEsIG1ldGFJZGVudGlmaWVyKTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICAkcGFnZTogZnVuY3Rpb24gJHBhZ2UoKSB7CiAgICAgIHRoaXMudXBkYXRlTWV0YSgpOwogICAgfQogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIHVwZGF0ZU1ldGFUYWdzKG51bGwsIHRoaXMuY3VycmVudE1ldGFUYWdzKTsKICB9Cn07Ci8qKg0KICogUmVwbGFjZSBjdXJyZW50TWV0YVRhZ3Mgd2l0aCBuZXdNZXRhVGFncw0KICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBuZXdNZXRhVGFncw0KICogQHBhcmFtIHtBcnJheTxIVE1MRWxlbWVudD59IGN1cnJlbnRNZXRhVGFncw0KICogQHJldHVybnMge0FycmF5PEhUTUxFbGVtZW50Pn0NCiAqLwoKZnVuY3Rpb24gdXBkYXRlTWV0YVRhZ3MobmV3TWV0YVRhZ3MsIGN1cnJlbnRNZXRhVGFncykgewogIGlmIChjdXJyZW50TWV0YVRhZ3MpIHsKICAgIF90b0NvbnN1bWFibGVBcnJheShjdXJyZW50TWV0YVRhZ3MpLmZpbHRlcihmdW5jdGlvbiAoYykgewogICAgICByZXR1cm4gYy5wYXJlbnROb2RlID09PSBkb2N1bWVudC5oZWFkOwogICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgICByZXR1cm4gZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChjKTsKICAgIH0pOwogIH0KCiAgaWYgKG5ld01ldGFUYWdzKSB7CiAgICByZXR1cm4gbmV3TWV0YVRhZ3MubWFwKGZ1bmN0aW9uIChtKSB7CiAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdtZXRhJyk7CiAgICAgIE9iamVjdC5rZXlzKG0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIHRhZy5zZXRBdHRyaWJ1dGUoa2V5LCBtW2tleV0pOwogICAgICB9KTsKICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpOwogICAgICByZXR1cm4gdGFnOwogICAgfSk7CiAgfQp9Ci8qKg0KICogVHJ5IHRvIGlkZW50aWZ5IGEgbWV0YSB0YWcgYnkgbmFtZSwgcHJvcGVydHkgb3IgaXRlbXByb3ANCiAqDQogKiBSZXR1cm4gYSBjb21wbGV0ZSBzdHJpbmcgaWYgbm9uZSBwcm92aWRlZA0KICogQHBhcmFtIHtPYmplY3R9IHRhZyBmcm9tIGZyb250bWF0dGVyIG9yIHNpdGVNZXRhVGFncw0KICogQHJldHVybnMge1N0cmluZ30NCiAqLwoKCmZ1bmN0aW9uIG1ldGFJZGVudGlmaWVyKHRhZykgewogIGZvciAodmFyIF9pID0gMCwgX2FyciA9IFsnbmFtZScsICdwcm9wZXJ0eScsICdpdGVtcHJvcCddOyBfaSA8IF9hcnIubGVuZ3RoOyBfaSsrKSB7CiAgICB2YXIgaXRlbSA9IF9hcnJbX2ldOwogICAgaWYgKHRhZy5oYXNPd25Qcm9wZXJ0eShpdGVtKSkgcmV0dXJuIHRhZ1tpdGVtXSArIGl0ZW07CiAgfQoKICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGFnKTsKfQovKioNCiAqIFJlbmRlciBtZXRhIHRhZ3MNCiAqDQogKiBAcGFyYW0ge0FycmF5fSBtZXRhDQogKiBAcmV0dXJucyB7U3RyaW5nfQ0KICovCgoKZnVuY3Rpb24gcmVuZGVyUGFnZU1ldGEobWV0YSkgewogIGlmICghbWV0YSkgcmV0dXJuICcnOwogIHJldHVybiBtZXRhLm1hcChmdW5jdGlvbiAobSkgewogICAgdmFyIHJlcyA9ICI8bWV0YSI7CiAgICBPYmplY3Qua2V5cyhtKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgcmVzICs9ICIgIi5jb25jYXQoa2V5LCAiPVwiIikuY29uY2F0KG1ba2V5XSwgIlwiIik7CiAgICB9KTsKICAgIHJldHVybiByZXMgKyAiPiI7CiAgfSkuam9pbignXG4gICAgJyk7Cn0="},{"version":3,"sources":["C:/Users/admin/Desktop/vuePressBlog/node_modules/@vuepress/core/lib/client/root-mixins/updateMeta.js"],"names":["unionBy","created","siteMeta","$site","headTags","filter","headerType","map","_","headerValue","$ssrContext","mergedMetaItems","getMergedMetaTags","title","$title","lang","$lang","pageMeta","renderPageMeta","mounted","currentMetaTags","document","querySelectorAll","updateMeta","methods","documentElement","newMetaTags","updateMetaTags","$page","frontmatter","meta","name","content","$description","metaIdentifier","watch","beforeDestroy","c","parentNode","head","forEach","removeChild","m","tag","createElement","Object","keys","key","setAttribute","appendChild","item","hasOwnProperty","JSON","stringify","res","join"],"mappings":";;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,gBAApB;AAEA,eAAe;AACb;AACAC,EAAAA,OAFa,qBAEF;AACT,SAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWC,QAAX,CACbC,MADa,CACN;AAAA;AAAA,UAAEC,UAAF;;AAAA,aAAkBA,UAAU,KAAK,MAAjC;AAAA,KADM,EAEbC,GAFa,CAET;AAAA;AAAA,UAAEC,CAAF;AAAA,UAAKC,WAAL;;AAAA,aAAsBA,WAAtB;AAAA,KAFS,CAAhB;;AAIA,QAAI,KAAKC,WAAT,EAAsB;AACpB,UAAMC,eAAe,GAAG,KAAKC,iBAAL,EAAxB;AAEA,WAAKF,WAAL,CAAiBG,KAAjB,GAAyB,KAAKC,MAA9B;AACA,WAAKJ,WAAL,CAAiBK,IAAjB,GAAwB,KAAKC,KAA7B;AACA,WAAKN,WAAL,CAAiBO,QAAjB,GAA4BC,cAAc,CAACP,eAAD,CAA1C;AACD;AACF,GAdY;AAeb;AACAQ,EAAAA,OAhBa,qBAgBF;AACT;AACA,SAAKC,eAAL,sBAA2BC,QAAQ,CAACC,gBAAT,CAA0B,MAA1B,CAA3B,EAFS,CAIT;;AACA,SAAKC,UAAL;AACD,GAtBY;AAwBbC,EAAAA,OAAO,EAAE;AACPD,IAAAA,UADO,wBACO;AACZF,MAAAA,QAAQ,CAACR,KAAT,GAAiB,KAAKC,MAAtB;AACAO,MAAAA,QAAQ,CAACI,eAAT,CAAyBV,IAAzB,GAAgC,KAAKC,KAArC;AAEA,UAAMU,WAAW,GAAG,KAAKd,iBAAL,EAApB;AACA,WAAKQ,eAAL,GAAuBO,cAAc,CAACD,WAAD,EAAc,KAAKN,eAAnB,CAArC;AACD,KAPM;AASPR,IAAAA,iBATO,+BASc;AACnB,UAAMK,QAAQ,GAAG,KAAKW,KAAL,CAAWC,WAAX,CAAuBC,IAAvB,IAA+B,EAAhD,CADmB,CAEnB;AACA;;AACA,aAAO9B,OAAO,CAAC,CAAC;AAAE+B,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,OAAO,EAAE,KAAKC;AAArC,OAAD,CAAD,EACZhB,QADY,EACF,KAAKf,QADH,EACagC,cADb,CAAd;AAED;AAfM,GAxBI;AA0CbC,EAAAA,KAAK,EAAE;AACLP,IAAAA,KADK,mBACI;AACP,WAAKL,UAAL;AACD;AAHI,GA1CM;AAgDba,EAAAA,aAhDa,2BAgDI;AACfT,IAAAA,cAAc,CAAC,IAAD,EAAO,KAAKP,eAAZ,CAAd;AACD;AAlDY,CAAf;AAqDA;;;;;;;AAMA,SAASO,cAAT,CAAyBD,WAAzB,EAAsCN,eAAtC,EAAuD;AACrD,MAAIA,eAAJ,EAAqB;AACnB,uBAAIA,eAAJ,EACOf,MADP,CACc,UAAAgC,CAAC;AAAA,aAAIA,CAAC,CAACC,UAAF,KAAiBjB,QAAQ,CAACkB,IAA9B;AAAA,KADf,EAEOC,OAFP,CAEe,UAAAH,CAAC;AAAA,aAAIhB,QAAQ,CAACkB,IAAT,CAAcE,WAAd,CAA0BJ,CAA1B,CAAJ;AAAA,KAFhB;AAGD;;AACD,MAAIX,WAAJ,EAAiB;AACf,WAAOA,WAAW,CAACnB,GAAZ,CAAgB,UAAAmC,CAAC,EAAI;AAC1B,UAAMC,GAAG,GAAGtB,QAAQ,CAACuB,aAAT,CAAuB,MAAvB,CAAZ;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeF,OAAf,CAAuB,UAAAO,GAAG,EAAI;AAC5BJ,QAAAA,GAAG,CAACK,YAAJ,CAAiBD,GAAjB,EAAsBL,CAAC,CAACK,GAAD,CAAvB;AACD,OAFD;AAGA1B,MAAAA,QAAQ,CAACkB,IAAT,CAAcU,WAAd,CAA0BN,GAA1B;AACA,aAAOA,GAAP;AACD,KAPM,CAAP;AAQD;AACF;AAED;;;;;;;;;AAOA,SAAST,cAAT,CAAyBS,GAAzB,EAA8B;AAC5B,0BAAmB,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,CAAnB,0BAAqD;AAAhD,QAAMO,IAAI,WAAV;AACH,QAAIP,GAAG,CAACQ,cAAJ,CAAmBD,IAAnB,CAAJ,EAA8B,OAAOP,GAAG,CAACO,IAAD,CAAH,GAAYA,IAAnB;AAC/B;;AACD,SAAOE,IAAI,CAACC,SAAL,CAAeV,GAAf,CAAP;AACD;AAED;;;;;;;;AAOA,SAASzB,cAAT,CAAyBY,IAAzB,EAA+B;AAC7B,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;AACX,SAAOA,IAAI,CAACvB,GAAL,CAAS,UAAAmC,CAAC,EAAI;AACnB,QAAIY,GAAG,UAAP;AACAT,IAAAA,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeF,OAAf,CAAuB,UAAAO,GAAG,EAAI;AAC5BO,MAAAA,GAAG,eAAQP,GAAR,gBAAgBL,CAAC,CAACK,GAAD,CAAjB,OAAH;AACD,KAFD;AAGA,WAAOO,GAAG,MAAV;AACD,GANM,EAMJC,IANI,CAMC,QAND,CAAP;AAOD","sourcesContent":["import unionBy from 'lodash/unionBy'\r\n\r\nexport default {\r\n  // created will be called on both client and ssr\r\n  created () {\r\n    this.siteMeta = this.$site.headTags\r\n      .filter(([headerType]) => headerType === 'meta')\r\n      .map(([_, headerValue]) => headerValue)\r\n\r\n    if (this.$ssrContext) {\r\n      const mergedMetaItems = this.getMergedMetaTags()\r\n\r\n      this.$ssrContext.title = this.$title\r\n      this.$ssrContext.lang = this.$lang\r\n      this.$ssrContext.pageMeta = renderPageMeta(mergedMetaItems)\r\n    }\r\n  },\r\n  // Other life cycles will only be called at client\r\n  mounted () {\r\n    // init currentMetaTags from DOM\r\n    this.currentMetaTags = [...document.querySelectorAll('meta')]\r\n\r\n    // update title / meta tags\r\n    this.updateMeta()\r\n  },\r\n\r\n  methods: {\r\n    updateMeta () {\r\n      document.title = this.$title\r\n      document.documentElement.lang = this.$lang\r\n\r\n      const newMetaTags = this.getMergedMetaTags()\r\n      this.currentMetaTags = updateMetaTags(newMetaTags, this.currentMetaTags)\r\n    },\r\n\r\n    getMergedMetaTags () {\r\n      const pageMeta = this.$page.frontmatter.meta || []\r\n      // pageMetaTags have higher priority than siteMetaTags\r\n      // description needs special attention as it has too many entries\r\n      return unionBy([{ name: 'description', content: this.$description }],\r\n        pageMeta, this.siteMeta, metaIdentifier)\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    $page () {\r\n      this.updateMeta()\r\n    }\r\n  },\r\n\r\n  beforeDestroy () {\r\n    updateMetaTags(null, this.currentMetaTags)\r\n  }\r\n}\r\n\r\n/**\r\n * Replace currentMetaTags with newMetaTags\r\n * @param {Array<Object>} newMetaTags\r\n * @param {Array<HTMLElement>} currentMetaTags\r\n * @returns {Array<HTMLElement>}\r\n */\r\nfunction updateMetaTags (newMetaTags, currentMetaTags) {\r\n  if (currentMetaTags) {\r\n    [...currentMetaTags]\r\n          .filter(c => c.parentNode === document.head)\r\n          .forEach(c => document.head.removeChild(c))\r\n  }\r\n  if (newMetaTags) {\r\n    return newMetaTags.map(m => {\r\n      const tag = document.createElement('meta')\r\n      Object.keys(m).forEach(key => {\r\n        tag.setAttribute(key, m[key])\r\n      })\r\n      document.head.appendChild(tag)\r\n      return tag\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Try to identify a meta tag by name, property or itemprop\r\n *\r\n * Return a complete string if none provided\r\n * @param {Object} tag from frontmatter or siteMetaTags\r\n * @returns {String}\r\n */\r\nfunction metaIdentifier (tag) {\r\n  for (const item of ['name', 'property', 'itemprop']) {\r\n    if (tag.hasOwnProperty(item)) return tag[item] + item\r\n  }\r\n  return JSON.stringify(tag)\r\n}\r\n\r\n/**\r\n * Render meta tags\r\n *\r\n * @param {Array} meta\r\n * @returns {String}\r\n */\r\n\r\nfunction renderPageMeta (meta) {\r\n  if (!meta) return ''\r\n  return meta.map(m => {\r\n    let res = `<meta`\r\n    Object.keys(m).forEach(key => {\r\n      res += ` ${key}=\"${m[key]}\"`\r\n    })\r\n    return res + `>`\r\n  }).join('\\n    ')\r\n}\r\n"]}]}